# Read the data
rawdata <- read.csv("G:/Summer/ANN/smoke/smoking.csv")
# Eliminate the missing data
data <- na.omit(rawdata)
# Training and testing
set.seed(6)
idx <- sample(2, size = nrow(data), replace = TRUE, prob = c(0.7, 0.3))
train_data <- data[idx == 1,]
test_data <- data[idx == 2,]
# Store the data
write.csv(train_data, "train_data.csv", row.names = FALSE)
write.csv(test_data, "test_data.csv", row.names = FALSE)
library(dplyr)
# Read train and test data
train_data <- read.csv("train_data.csv")
test_data <- read.csv("test_data.csv")
# separate (with the variables that wants to be analyzed)
train_x <- data.matrix(train_data[,c(2, 3, 4, 5, 6, 13, 15, 16, 17, 18, 20, 23)])
train_y <- data.matrix(train_data[,27])
test_x <- data.matrix(test_data[,c(2, 3, 4, 5, 6, 13, 15, 16, 17, 18, 20, 23)])
test_y <- data.matrix(test_data[,27])
# ANN
set.seed(1234567)
library(keras)
# Note: we don't explicitly library(TensorFlow). Keras will take care of that.
library(tidyverse)
network <- keras_model_sequential() %>%
layer_dense(units = 12,
activation = "relu",
input_shape = 12) %>%
layer_dense(units = 15, activation = "relu") %>%
layer_dense(units = 15, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
network %>% compile(optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
history <- network %>% fit(train_x,
train_y,
epochs = 100,
batch_size = 128,
validation_data = list(test_x, test_y))
plot(history)
metrics <- network %>% evaluate(test_x, test_y, verbose=1)
metrics
prediction <- predict(network, test_x)
